@using Microsoft.AspNetCore.Identity
@inject SignInManager<IdentityUser> signInManager
@inject UserManager<IdentityUser> userManager
@model Blogger.Web.Models.ViewModels.Blog.BlogDetailsViewModel
@{
    ViewData["Title"] = Model.PageTitle;
}

<div class="container my-5">
    <div class="row justify-content-center">
        <div class="col-12 col-md-8">

            @if (Model != null)
            {
                <h1 class="mb-3">@Model.Heading</h1>
                <div class="d-flex justify-content-between mb-3">
                    <span class="text-secondary">@Model.Author</span>
                    <span class="text-secondary">@Model.PublishedDate.ToShortDateString()</span>
                </div>

                <div class="mb-3">
                    @if (signInManager.IsSignedIn(User))
                    {
                        
                            @if (Model.Liked)
                            {
                                <a style="cursor: pointer;">
                                    <i class="bi bi-hand-thumbs-up-fill"></i>
                                </a>
                                
                            } else {
                                <a id="like-button" style="cursor: pointer;">
                                    <i class="bi bi-hand-thumbs-up"></i>
                                </a>
                            }
                        
                    }
                    <span id="totalLikes" class="fw-bold">@Model.TotalLikes</span> Likes
                </div>
                <div class="mb-3 d-flex">
                    @foreach (var tag in Model.Tags)
                    {
                        <span class="badge badge-dark me-1 mr-1">@tag.DisplayName</span>
                    }
                </div>
                <img src="@Model.FeaturedImageUrl" class="d-block img-fluid mb-3" alt="@Model.Heading" />
                <div class="mb-3 blog-details-content">
                    @Html.Raw(Model.Content)
                </div>

                <div class="card">
                    <div class="card-header">
                        <h5>Comments</h5>

                        @if (signInManager.IsSignedIn(User))
                        {
                            <form method="post">
                                <div class="mb-3">
                                    <label for="comment" class="form-label">Comment Description</label>
                                    <input type="text" class="form-control" asp-for="CommentDescription" />
                                </div>
                                <div class="mb-3">
                                    <button type="submit" class="btn btn-dark">Submit</button>
                                    <input type="hidden" asp-for="Id" value="@Model.Id" />
                                    <input type="hidden" asp-for="UrlHandle" />
                                </div>
                            </form>
                        }
                    </div>
                    <div class="card-body">
                        @if (Model.Comments != null && Model.Comments.Any())
                        {
                            @foreach (var comment in Model.Comments)
                            {    
                                <div class="card mb-3">
                                    <div class="card-body">
                                        <div>
                                            <span class="fw-bolder">@comment.Username</span>
                                            <span class="text-secondary">@comment.DateAdded.ToShortDateString()</span>
                                        </div>
                                        <div>
                                            @comment.Description
                                        </div>
                                    </div>
                                </div>
                            }
                        } else {
                            <span class="fw-bolder text-center text-black">There Are No Comment Yet!</span>
                        }
                    </div>
                </div>
                @* <div class="mb-3">
                    <h3>Comments</h3>
                    <form method="post" action="/api/BlogPostComment/Add">
                        <input type="hidden" name="BlogPostId" value="@Model.Id" />
                        <input type="hidden" name="UserId" value="@userManager.GetUserId(User)" />
                        <div class="mb-3">
                            <textarea name="Content" class="form-control" rows="3" placeholder="Write your comment here"></textarea>
                        </div>
                        <button type="submit" class="btn btn-primary">Submit</button>
                    </form>
                    <div class="mt-3">
                        @foreach (var comment in Model.Comments)
                        {
                            <div class="card mb-3">
                                <div class="card-body">
                                    <div class="d-flex justify-content-between">
                                        <span class="fw-bold">@comment.UserDisplayName</span>
                                        <span class="text-secondary">@comment.CreatedDate.ToShortDateString()</span>
                                    </div>
                                    <p class="mt-2">@comment.Content</p>
                                </div>
                            </div>
                        }
                </div> *@
            } else {
                <div class="alert alert-danger" role="alert">
                    Blog not found!
                </div>
            }
        </div>
    </div>
</div>

@section Scripts {
    <script>
        const buttonLikeElement = document.getElementById('like-button');
        const totalLikeElement = document.getElementById('totalLikes');

        const getTotalLikes = async () => {
            fetch(`/api/BlogPostLike/@Model.Id/totalLikes`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    'forEach': '*/*'
                }
            })
            .then(response => response.json())
            .then(result => totalLikeElement.innerHTML = result)
        }

        const fetchAPIAddLike = async () => {
            fetch(`/api/BlogPostLike/Add`, 
                {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        BlogPostId: '@Model.Id',
                        UserId: '@userManager.GetUserId(User)'
                    })
                }
            ).then(() => {
                buttonLikeElement.innerHTML = '<i class="bi bi-hand-thumbs-up-fill"></i>'
                buttonLikeElement.removeEventListener('click', fetchAPIAddLike);
                getTotalLikes();
            })
        }

        buttonLikeElement.addEventListener('click', fetchAPIAddLike);
    </script>
}
